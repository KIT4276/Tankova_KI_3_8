//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Ziggurat
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""fcbeaa67-9f02-4b42-adf8-5928e92e4c60"",
            ""actions"": [
                {
                    ""name"": ""ActivateRotation"",
                    ""type"": ""Button"",
                    ""id"": ""970f9626-9f07-41ce-84be-2d461d40b23b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Value"",
                    ""id"": ""7fc78793-9742-41eb-8de7-4395b2d15f4e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""d6f5ec4f-497c-4fec-9211-0c87da86d36c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""844d4bca-af35-4126-8103-ce75420888fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""1c1abb66-2d06-4817-b9b5-277c73c77011"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d3473273-150c-4209-b811-5f10aae7dfba"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74218161-ed88-4bf8-84e6-aa7f0c8ad3bd"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a30011c7-4012-422c-8e45-bbb1d2c74c5f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efd07c3f-346c-4a5f-bdb8-7c63ead69475"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0285164b-2d76-477c-b415-f88ee6cafe8a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d9edf454-ae65-416c-95e3-4025aade9c0b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b7ec4f27-05fc-4078-b9f0-92907c6a2048"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""41af774b-3d16-4c70-9494-62a2ea6c757c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2ddcc1e9-7ea8-4ac4-b175-77703f189d78"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_ActivateRotation = m_Camera.FindAction("ActivateRotation", throwIfNotFound: true);
            m_Camera_Scale = m_Camera.FindAction("Scale", throwIfNotFound: true);
            m_Camera_Rotate = m_Camera.FindAction("Rotate", throwIfNotFound: true);
            m_Camera_Select = m_Camera.FindAction("Select", throwIfNotFound: true);
            m_Camera_WASD = m_Camera.FindAction("WASD", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_ActivateRotation;
        private readonly InputAction m_Camera_Scale;
        private readonly InputAction m_Camera_Rotate;
        private readonly InputAction m_Camera_Select;
        private readonly InputAction m_Camera_WASD;
        public struct CameraActions
        {
            private @Controls m_Wrapper;
            public CameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ActivateRotation => m_Wrapper.m_Camera_ActivateRotation;
            public InputAction @Scale => m_Wrapper.m_Camera_Scale;
            public InputAction @Rotate => m_Wrapper.m_Camera_Rotate;
            public InputAction @Select => m_Wrapper.m_Camera_Select;
            public InputAction @WASD => m_Wrapper.m_Camera_WASD;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @ActivateRotation.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnActivateRotation;
                    @ActivateRotation.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnActivateRotation;
                    @ActivateRotation.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnActivateRotation;
                    @Scale.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnScale;
                    @Scale.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnScale;
                    @Scale.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnScale;
                    @Rotate.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotate;
                    @Rotate.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotate;
                    @Rotate.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotate;
                    @Select.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnSelect;
                    @Select.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnSelect;
                    @Select.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnSelect;
                    @WASD.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnWASD;
                    @WASD.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnWASD;
                    @WASD.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnWASD;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ActivateRotation.started += instance.OnActivateRotation;
                    @ActivateRotation.performed += instance.OnActivateRotation;
                    @ActivateRotation.canceled += instance.OnActivateRotation;
                    @Scale.started += instance.OnScale;
                    @Scale.performed += instance.OnScale;
                    @Scale.canceled += instance.OnScale;
                    @Rotate.started += instance.OnRotate;
                    @Rotate.performed += instance.OnRotate;
                    @Rotate.canceled += instance.OnRotate;
                    @Select.started += instance.OnSelect;
                    @Select.performed += instance.OnSelect;
                    @Select.canceled += instance.OnSelect;
                    @WASD.started += instance.OnWASD;
                    @WASD.performed += instance.OnWASD;
                    @WASD.canceled += instance.OnWASD;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);
        public interface ICameraActions
        {
            void OnActivateRotation(InputAction.CallbackContext context);
            void OnScale(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnSelect(InputAction.CallbackContext context);
            void OnWASD(InputAction.CallbackContext context);
        }
    }
}
